<snippet>
  <content><![CDATA[
/**
 * Implementation of hook_access().
 *
 * This hook allows node modules to limit access to the node types they define.
 *
 * The administrative account (user ID #1) always passes any access check, so 
 * this hook is not called in that case. If this hook is not defined for a node
 * type, all access checks will fail, so only the administrator will be able to
 * see content of that type. However, users with the "administer nodes" 
 * permission may always view and edit content through the administrative 
 * interface.
 * 
 * @param string \$op 
 *  The operation to be performed. Possible values:
 *  - "create"
 *  - "delete"
 *  - "update"
 *  - "view"
 * @param object \$node 
 *  The node on which the operation is to be performed, or, if it does not yet 
 *  exist, the type of node to be created.
 * @param object \$account 
 *  A user object representing the user for whom the operation is to be 
 *  performed.
 * @return boolean
 *  TRUE if the operation is to be allowed; FALSE if the operation is to be
 *  denied; NULL to not override the settings in the node_access table, or 
 *  access control modules.
 */
function ${1:modulename}_access(\$op, \$node, \$account) {
  switch(\$op) {
    case "create" :
      return user_access('create stories', \$account);
    break;

    case "update" :
    case "delete" :
      return (user_access('edit own stories', \$account) && (\$account->uid == \$node->uid));
    break;

    case "view" :
      return user_access('access content');
    break;
  }
}
  ]]></content>
  <tabTrigger>hook_access</tabTrigger>
  <scope>source.php</scope>
  <description>Define node access restrictions.</description>
</snippet>